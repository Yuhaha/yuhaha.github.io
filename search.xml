<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[HTML5笔记]]></title>
    <url>%2F2017%2F07%2F15%2Fh5%2F</url>
    <content type="text"><![CDATA[DTD文档类型定义可定义合法的XML文档构建模块，它使用一系列合法的元素来定义文档的机构。在HTML中DTD规定了标记语言的规则，这样浏览器才能正确地呈现内容。HTML5不基于SGML，所以不需要引用DTD 。就是说HTML5并不是定义为SGML或者XML的也能够用程序，HTML5的DTD声明中不需要使用DTD文件。 新增标签结构标签（块状元素）12345678910&lt;article&gt;标记定义一篇文章&lt;/article&gt;&lt;header&gt;标记定义额一个网页或一个区域的头部&lt;/header&gt;&lt;nav&gt;标记定义导航链接&lt;/nav&gt;&lt;section&gt;标记定义一个区域&lt;/section&gt;&lt;aside&gt;标记定义页面内容部分的侧边栏&lt;/aside&gt;&lt;hgroup&gt;标记定义文件中的一个区块的相关信息&lt;/hgroup&gt;&lt;figure&gt;标记定义一组媒体内容以及它们的标题&lt;/figure&gt;&lt;figcaption&gt;标记定义figure元素的标题&lt;/figcaption&gt;&lt;footer&gt;标记定义一个页面或一个区域的底部&lt;/footer&gt;&lt;dialog&gt;标记定义一个对话框/绘画课类似微信 注意点： header/section/aside/article/footer不能自嵌套； header/section/footer &gt; aside/article/figure/hgroup/nav &gt; div / figcaption; 就是一层一层嵌套，级别低的在级别高的里面，header/section/footer级别最高，适合做最外面的盒子 section通常不推荐没有标题内容使用section元素,不要将section元素作为设置样式的页面容器，那是div的功能如果article元素、aside元素、nav元素更符合使用条件，那不要用section 不能使用menu元素代替nav元素 多媒体标签12345&lt;video src=&quot;&quot;&gt;标记定义一个视频&lt;/video&gt;&lt;audio src=&quot;&quot;&gt;标记定义音频内容&lt;/audio&gt;&lt;source&gt;标记定义媒体资源&lt;canvas&gt;标记定义图片&lt;/canvas&gt;&lt;embed src=&quot;&quot; type=&quot;&quot;&gt;标记定义外部的可交互的内容或插件，比如flash web应用标签 状态标签： 12&lt;meter&gt;状态标签(实时状态显示：气压、气温)C、O&lt;/meter&gt;&lt;progress&gt;状态标签(任务过程：安装、加载)C、O、F&lt;/progress&gt; 列表标签： 12&lt;datalist&gt;为input标签定义一个下拉列表，配合option F、O&lt;/datalist&gt;&lt;details&gt;标记定义一个元素的详细内容，配合summary C&lt;/details&gt; Menu: 123&lt;menu&gt;命令列表（目前所有主流浏览器都不支持）&lt;/menu&gt;&lt;menuitem&gt;menu命令列表标签（只有firfox8+支持）&lt;command&gt;menu标记定义一个命令按钮 只有IE9支持 其他标签 注释标签1234567&lt;ruby&gt;标记定义注释或音标&lt;/ruby&gt;&lt;rt&gt;标记定义对ruby的注释内容文本&lt;/rt&gt;&lt;rp&gt;告诉某些不支持ruby元素的浏览器如何去显示&lt;/rp&gt;&lt;mark&gt;标记定义有标记的文本（黄色选中状态）&lt;/mark&gt;&lt;output&gt;标记定义一些输出类型，计算表单结果配合oninput事件（该事件可以实时监听文本框的输入变化）&lt;/output&gt;&lt;keygen&gt;标记定义表单里一个生成的键值（加密信息传送）&lt;time&gt;标记定义一个日期/时间，目前所有主流浏览器都不支持&lt;/time&gt; 删除的标签 纯表现的元素（能使用css替代的元素）Basefont big center font s strike tt u 对可用性产生负面影响的元素frame frameset noframes (可用iframe) 产生混淆的元素acronym 首字母的缩小 applet isindex dir 重定义标签显示不变，只是表达的含义进行了重新定义的标签12345678&lt;b&gt;代表内联文本，通常是粗体，没有传递表示重要的意思&lt;/b&gt;&lt;i&gt;代表内联文本，通常是斜体，没有传递表示重要的意思&lt;/i&gt;&lt;dd&gt;可以同details与figure一同使用，定义包含文本，dialog也可用&lt;/dd&gt;&lt;dt&gt;可以同details与figure一同使用，汇总细节，dialog也可用&lt;/dt&gt;&lt;hr&gt;表示主题结束而不是水平线，虽然显示相同&lt;menu&gt;重新定义用户界面的菜单，配合commond或者menuitem使用&lt;/menu&gt;&lt;small&gt;表示小字体，例如打印注释或者法律条款&lt;/small&gt;&lt;strong&gt;表示重要性而不是强调符号&lt;/strong&gt; 新增的属性 input属性:email/url/number/range/date picker/search/color/tel date picker Input类型： date选取日、月、年 month选取月、年 week选取周和年 time 选取时间（小时和分钟） datetime选取时间、日、月、年UTC时间 ie火狐chrome不兼容， datetime-local选取时间、日、月、年（本地时间） ie火狐不兼容， 表单属性：autocomplete/autofocus/multiple/placeholder/required autocomplete=&quot;on&quot; autofocus属性该控件自动获得光标焦点,适用于所有input标签的类型 或按钮控件上，autofocus=&quot;autofocus&quot; multiple 适合input下的email和file placeholder输入框没输入状态下显示的文字，输入后消失，适用于input标签type属性为text,search,url,telephone.email,password required属性规定必须在提交之前填写输入域不能为空&lt;input type=&quot;text&quot; required=&quot;required&quot; name=&quot;&quot;&gt;适用于input标签type属性为text,search,url,telephone.email,password,date pickers,number,checkbox,radio,file 链接属性：link的sizes属性/base的target属性/超链接a &lt;link rel=&quot;icon&quot; type=&quot;image/gif&quot; href=&quot;icon.gif&quot; sizes=&quot;16*16&quot;&gt; &lt;base href=&quot;http://localhost/&quot; target=&quot;_blank&quot;&gt; base标签为页面上的所有链接规定默认地址或默认目标。写在head标签中 超链接a a:media=”handhelp”即支持手持设备，tv为电视设备 a:hreflang=”zh”设置中文语言 a:rel=”external”设置超链接的引用，这里为外部链接 其他属性：script/html/style script defer:加载完脚本后并不执行而是等整个页面加载完之后再执行 &lt;script defer scr=&quot;url&quot;&gt;&lt;/script&gt; async:加载完脚本后立刻执行，不用等整个页面都加载完，属于异步执行 &lt;html manifest=&quot;cache.manifest&quot;&gt;定义页面离线应用文件 &lt;style scoped&gt;&lt;/style&gt; scoped内嵌css。可以在任意地方写 ol有序列表:start–起始值 reversed——倒序排列1234567&lt;ol start=&quot;5&quot; reversed=&quot;reversed&quot;&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt;&lt;/ol&gt; 全局属性：对任何元素都可以使用的元素 contentEditable:true可编辑 designMode：页面是否可编辑，若设置可编辑， contentEditable都能编辑 hidden spellcheck：对input或textarea检查 tabindex：按tab可定位 复习属性 form action 属性可提交到不同页面。 form method 指定不同的提交方式post/get form enctype指定不同编码方式。 text/plain 空格转换为 “+” 加号，但不对特殊字符编码。multipart/form-data不对字符编码。在使用包含文件上传控件的表单时，必须使用该值。application/x-www-form-urlencoded在发送前编码所有字符（默认） form target:分别指定在任何处打开表单提交所需加载的页面 _blank 新窗口 _self _parent _top当前窗口 framename 指定框架打开 autofocus：为文本框选择框或按钮控件上加上该属性，当画面打开时， required：输入框为空白时，提交会提示 labels标签的control属性：在标签内部放置一个表单元素， placeholder：指文本框处于未输入状态时显示的输入提示。 list 属性为某个datalist元素的id，datalist类似选择框，当用户想要设定的值不在选择列表之内时，允许自行输入 input元素使用pattern属性，值设为某个格式的正则表达式。提交时针对这些进行检查，是否符合给定格式 selectiondirection属性，当用户用鼠标选取部分文字时，正向为forward，反向为backward，没有选取任何文字时，属性为forward indeterminate：对于复选框checkbox元素来说，过去只是选取与非选取这两种状态。在HTML5中，可以在JavaScript脚本代码中对该元素使用indeterminate属性，以说明复选框处于“尚未明确是否选取”状态。 标签 tt等宽的西方字体 del：删字 ins：新增字 s：这些内容不被提倡使用的 sup上标 sub下标 mark:高亮 em:强调（斜） strong:着重 加粗 不同浏览器显示不同 dfn 定义 code 代码 samp 例子代码 kbd 用户输入 var 变量 cite 引用 address：多行 可被浏览器识别 blockquote ：缩进 q：引用 pre:不做内容格式化 hr 水平线 没有结束标记 abbr ：缩写注释 &lt;abbr title=&quot;中华人民共和国&quot;&gt;PRC&lt;/abbr&gt; &lt;bdo dir=rtl&gt; 方向从右到左&lt;bdi&gt; 正回来]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>html5</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git学习]]></title>
    <url>%2F2017%2F04%2F15%2Fgit%2F</url>
    <content type="text"><![CDATA[详细教程来源： 廖雪峰的Git教程 官方git文档 安装初始化 git config --global user.name &quot;github用户名&quot; git config --global user.email &quot;邮箱&quot; --global 更改的配置文件位于用户目录下的，即该用户下所有项目默认使用该配置，文件保存在~/.gitconfig文件 --system 系统中对所有用户普遍适用的配置 去掉–global,重 新配置设定保存在.get/config文件里 使用git config --list 查看已有配置信息 创建版本库 mkdir learngit创建一个新目录 git init 初始化一个本地git仓储 添加文件及提交 git status 查看本地仓储的变更状态 git add . /git add --all添加所有文件如$ git add file2.txt file3.txt git add 文件名 添加单个文件或多个 .gitignore文件 添加本地git 忽略清单文件 window文件新建.开头文件夹 要用命令mkdir .gitignore 新建文件 echo &#39;&#39; &gt;&gt; .aaa 或sublime新建 git commit -m &quot;message...&quot;提交被托管的文件变化到本地仓储 git commit 注释多的时候，不加-m ，打开vim写注释 git commit -a -m &quot;message...&quot; -a表示跳过使用暂存区提交， 不用add，已经跟踪过的才可-a 版本回退 git status 查看本地仓储的变更状态 git diff git diff 查看哪些更新还没暂存 git diff --cached或git diff --staged 哪些更新已暂存还未提交 git log 查看提交日志，最近的一次是append GPL，上一次是add distributed，最早的一次是wrote a readme file git log --pretty=oneline 显示一行 哈希值全显 git log --oneline 显示一行 哈希值简显 git log --oneline --decorate --graph --all 全部分支 git reset --soft HEAD~ 只改head回到上个版本，工作区暂存区不变 git reset [--mixed] HEAD~ 改head和暂存区，不改工作区 git reset --hard 2d2250 前六位版本强制回归版本 git reset --hard HEAD^ head最新版本，回到上个版本，git reset --hard HEAD^^回到上上个版本，上100个版本HEAD~100 git reflog查看命令历史回新版本 工作区和暂存区工作区就是learngit ,工作区有一个隐藏目录.git，是Git的版本库。Git的版本库里有stage（或者叫index）的暂存区，还有自动创建的第一个分支master，以及指向master的一个指针叫HEAD。 git add把文件添加进去，是把文件修改添加到暂存区； git commit提交更改，是把暂存区的所有内容提交到当前分支。新建license.txt 修改readme.txt 再分别git add 使用git status查看stage： 撤销修改 场景1：当改了工作区某个文件的内容，撤销修改用命令git checkout -- file。后推荐使用 git restore filename 场景2：当改了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。 场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。 修改commit 重新注释: git commit –amend 删除文件，重命名文件 rm file 查看git status 确认删除则git rm file ,git commit -m “” 误删则 git checkout – file 暂存区回退到工作区,本地文件不删除：git rm –cached file 已提交删除文件，本地文件删除（自动添加到暂存区）： git rm file 已提交重命名(自动添加到暂存区)：git mv old new 远程仓库 创建SSH Key。ssh-keygen -t rsa -C &quot;youremail@example.com&quot; 登陆GitHub，打开“Account settings”，“SSH Keys”页面： 点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容。 添加远程库和删除 登陆GitHub，创建一个新的仓库learngit。 在本地learngit仓库下运行命令：git remote add origin git@github.com:yourusername/xxx.git yourusername为github账户名，远程库的名字就是origin。 git remote rm origin删除远程 Git 仓库 git remote -v 远程 Git 仓库地址推送到远程库 git push -u origin master把当前分支master推送到远程。 第一次推送加上了-u参数，把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令git push origin master 从远程库克隆 git clone git@github.com:yourusername/xxx.git默认的git://使用ssh还可以用https://github.com/用户名/库名.git使用https协议每次推送都必须输入口令 创建删除与合并分支 git checkout -b &lt;name&gt;-b参数表示创建并切换 git branch &lt;name&gt;创建&lt;name&gt;分支 git checkout &lt;name&gt;切换到&lt;name&gt;分支 切换分支前保证当前分支已提交，以免污染其他分支。未提交切换，切换后的分支存在未提交的文件，切换回原分支 提交，再切换到要切换的分支，该文件不存在了。已提交后再修改未提交，切换分支 不给切换。 git branch命令查看显示分支,当前分支前面会标一个*号 git branch -v 查看最后一次提交 git branch -vv 查看设置的所有跟踪分支 git merge &lt;name&gt;合并某分支到当前分支 git branch -d &lt;name&gt; 删除分支，切换到别的分支再删该分支 git branch -D &lt;name&gt; 强制删除，有内容时 git branch name &lt;commithash&gt; 新建分支回到该哈希版本 git push --delete origin &lt;name&gt;删除远程分支 git remote prune origin --dry-run 列出仍在远程跟踪但是远程已被删除的无用分支 git remote prune origin清除上面命令列出来的远程跟踪 新建分支gh-pages 固定名字，https://用户名.github.io/库名/即可访问html 解决冲突 新建分支git checkout -b feature1,修改readme.txt改成Creating a new branch is quick AND simple.,在feature1分支上提交： 切换到master分支$ git checkout master在master分支上修改readme.txt,改成Creating a new branch is quick &amp; simple.`提交 git merge feature1，Git无法执行“快速合并”，只能试图把各自的修改合并起来，需手动解决冲突后再提交,修改成Creating a new branch is quick and simple.再git，commit 用带参数的 git log --graph --pretty=oneline --abbrev-commit可以看到分支的合并情况： 分支管理策略合并分支时，git merge --no-ff -m &quot;merge with no-ff&quot; dev加上–no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。 Bug分支修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。 git stash git checkout master git checkout -b issue-101 git add readme.txt git commit -m &quot;fix bug 101&quot; git checkout master git merge --no-ff -m &quot;merged bug fix 101&quot; issue-101 git branch -d issue-101 git checkout dev git status git stash list 需要恢复一下，有两个办法： git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除； git stash pop，恢复的同时把stash内容也删了： git stash list查看，就看不到任何stash内容了： $ git stash list 可多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令： $ git stash apply stash@{0} Feature分支添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支: git checkout -b feature-vulcan git add vulcan.py git status git commit -m &quot;add feature vulcan&quot; git checkout dev 若新功能必须取消， git branch -d feature-vulcan 强行删除： git branch -D feature-vulcan 多人协作 在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆： git clone git@github.com:michaelliao/learngit.git 查看远程库信息，使用git remote -v； 默认情况下，只能看到本地的master分支,用git branch命令看看 本地新建的分支如果不推送到远程，对其他人就是不可见的； 从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交； 在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致； 建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name； 从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。 修改后git add、 git commit -m &quot;&quot;、 git push origin branch-name 创建标签 git tag &lt;name&gt;打一个新标签,默认标签是打在最新提交的commit上的，若要找之前的版本打标签，方法是找到历史提交的commit id，然后打上如 git tag &lt;name&gt; commit_id git tag查看所有标签： git show &lt;tagname&gt;查看标签信息,标签不是按时间顺序列出，而是按字母排序的git show v0.9 git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;可以指定标签信息；-a指定标签名，-m指定说明文字： git tag -s &lt;tagname&gt; -m &quot;blablabla...&quot;可以用PGP签名标签,首先安装gpg（GnuPG）,如报错要配置Key 操作标签 命令git push origin &lt;tagname&gt;可以推送一个本地标签； 命令git push origin --tags可以推送全部未推送过的本地标签； 命令git tag -d &lt;tagname&gt;可以删除一个本地标签； 命令git push origin :refs/tags/&lt;tagname&gt;可以删除一个远程标签。 忽略特殊文件在Git工作区的根目录下创建.gitignore文件，把要忽略的文件名填进去，Git就会自动忽略这些文件。所有配置文件.gitignore文件 忽略文件的原则是： 忽略操作系统自动生成的文件，比如缩略图等； 忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件； 忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。 要添加的文件被.gitignore忽略了，用-f强制添加：git add -f App.class 用git check-ignore命令检查：12$ git check-ignore -v App.class.gitignore:3:*.class App.class 配置别名1234$ git config --global alias.st status$ git config --global alias.co checkout$ git config --global alias.ci commit$ git config --global alias.br branch 命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区，配置一个unstage别名：$git config --global alias.unstage &#39;reset HEAD&#39; 配置一个git last，让其显示最后一次提交信息：git config --global alias.last &#39;log -1&#39; 配置lg: 1git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit" git lg的效果： 配置文件 配置Git的时候，加上–global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。每个仓库的Git配置文件都放在.git/config文件中. 别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。 当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfiggit 内部原理–底层 .git 文件夹 config 文件包含项目特有的配置选项 description 描述 HEAD 文件指向目前被检出的分支 hooks/ 目录包含客户端或服务端的钩子脚本（hook scripts） info/ 目录包含一个全局性排除（global exclude）文件， 用以放置那些不希望被记录在 .gitignore 文件中的忽略模式（ignored patterns）。 objects/ 目录存储所有数据内容 refs/ 目录存储指向数据（分支、远程仓库和标签等）的提交对象的指针 index git init时无该文件，文件保存暂存区信息。git 底层命令 git hash-object -w --stdin git hash-object 会接受你传给它的东西，而它只会返回可以存储在 Git 仓库中的唯一键。 -w 选项会指示该命令不要只返回键，还要将该对象写入数据库中。 最后，–stdin 选项则指示该命令从标准输入读取内容;若不指定此选项，则须在命令尾部给出待存储文件的路径。git hash-object -w test.txt find .git/objects -type f 查看对象数据库记录文件，Git 存储内容的方式——一个文件对应一条内容， 以该内容加上特定头部信息一起的 SHA-1 校验和为文件命名 git cat-file -p 哈希值 查看内容。git cat-file -p 99f1a6d12cb4b6f19c8655fca46c3ecf317074e0 git cat-file -t 哈希值 查看对象类型,git对象为blob类型，树对象为tree类型。 git cat-file -t 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a 创建一个树对象 git update-index命令创建一个暂存区。git update-index --add --cacheinfo 100644 \ 83baae61804e65cc73a7201a7252750c76066a30 test.txt 让git对象对应上文件名 git write-tree 命令将暂存区内容写入一个树对象。git write-tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579 提交对象echo &#39;xxcomment&#39; | git commit-tree d8329f git ls-files -s 查看暂存区显示有关索引和工作树中文件的信息]]></content>
      <categories>
        <category>GIT</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sublime配置及快捷键]]></title>
    <url>%2F2017%2F03%2F20%2Fsublime%2F</url>
    <content type="text"><![CDATA[安装配置安装packageconcrol:快捷键 ctrl+` (点是~那个键)或者view-show console,sublime text3版本粘贴如下代码： 1import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) 快捷键 ctrl+n:新建标签页 ctrl+shift+n:新建窗口，ctrl+w:关闭标签页，ctrl+shift+t :恢复刚刚关闭的标签 ctrl+p:可查找文件，输入路径或者文件名 +@ 字符跳转可定位查找选择器，#关键字跳转，:行号跳转同ctrl+g。支持模糊匹配 ctrl+shift+p 跳出命令面板，输入文件类型如set js 可改文件类型，输入pcip 安装插件 ctrl+k+b：显示或隐藏侧栏 F11全屏，shift+f11无干扰全屏 ctrl+enter：在当前行下面新增一行并跳至该行 ctrl+shift+enter：在当前行上面新增一行并跳至该行 ctrl+→/←：逐词移动 ctrl+shift+→/←：逐词选择 ctrl+shift+↑/↓：移动当前行内容 ctrl+shift+d：复制该行（光标停留行） ctrl+H查找并替换 光标定位一个地方，ctrl+d 可选中单词，无限+ctrl+d 可查找该词产生多行游标，ctrl+k 可跳过，ctrl+u回退 选中关键字然后F3跳到关键字下一个位置，shift+f3 跳上一个位置，alt+F3 全部选中，ctrl+d是自主选择 ctrl+a全选，+ ctrl+shift+L 多行游标 鼠标定位一个地方， 按shift +鼠标右键可拖动产生多行游标 ctrl+j 当前选中区域合并为一行 ctrl+shift+enter 跳转新建上一行 ctrl+{向左缩进 ctrl+}向右缩进 ctrl+F搜索，enter跳到关键字下一个位置，shift+enter跳到上一个位置，alt+enter选中所有位置 ctrl+shift+V粘贴并保持缩进格式 ctrl+m快速在起始括号和结尾括号间切换 ctrl+shif+m 快速选择括号间的内容安装常用插件 ctrl+shift+p 输入pcip回车再输入插件名前端开发插件 Emmet插件快捷键 输入! 按ctrl+E快速完成html布局 alt+. 匹配闭合标签 ctrl+shift+g 快速包裹内容 shift+alt+w也可 shift+ctrl+;删除包裹的html标签 `shift+ctrl+``快速成对修改html标签 AutoFileName插件 自动检索并补齐文件路径 docblockr插件快速完成注释 在函数的前面一行，输入/**按tab CSScomb插件前端css属性排序工具，快捷键ctrl+shift+c,排序后出现空行，安装CSSFormat插件，执行EDIT → css format →expanded 删除空行 HTML-CSS-JS Prettify 格式化，事先安装nodejs， ctrl+shift+h快捷键 AdvanceNewFile 快速创建新文件夹及文件， 快捷键ctrl+alt+nMarkdown插件 MarkDown Editing：支持Markdown语法高亮 OmniMarkupPreviwer：实时在浏览器中预览 Ctrl+Alt+O: Preview Markup in Browser. Ctrl+Alt+X: Export Markup as HTML. Ctrl+Alt+C: Copy Markup as HTML.]]></content>
      <categories>
        <category>编辑器</category>
      </categories>
      <tags>
        <tag>sublime</tag>
        <tag>sublime插件</tag>
        <tag>编辑器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+github+coding搭建博客及备份]]></title>
    <url>%2F2017%2F03%2F10%2Fhexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[搭建环境准备（包括node.js和git环境） 下载git并安装 下载Node.js并安装 git配置 打开Git Bash,设置Git的user name和email：(如果是第一次的话) 12git config --global user.name &quot;github用户名&quot;git config --global user.email &quot;邮箱&quot; 生成密钥ssh-keygen -t rsa -C &quot;邮箱&quot;,会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，打开并复制里面的内容 登录github设置SSH and GPGkeys,将复制的密钥添加进去 node.js配置 下载安装node.js，安装完后打开运行cmd,输入node -v 、npm -v查看是否安装成功 Nodejs全局环境变量配置 在安装的Nodejs的主目录下如d:\nodejs下新建node_global及node_cache两个文件夹 在cmd 中输入如下命令: 12npm config set prefix “d:\nodejs\node_global”npm config set cache “d:\nodejs\node_cache” 增加NOEDE_PATH 我的电脑”右键“属性”-“高级系统设置”-“高级”-“环境变量，在系统变量下新建”NODE_PATH”，输入”D:\nodejs\node_global\node_modules”，改变了module的默认地址，所以上面的用户变量都要跟着改变一下（用户变量”PATH”修改为“d:\nodejs\node_global\”） npm安装模块使用淘宝镜像使用 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm$ npm install -g cnpm --registry=https://registry.npm.taobao.org 安装Hexo新建博客到github基本流程 npm install -g hexo-cli 新建文件夹如Blog，打开文件夹，按shift+鼠标右键 在此处打开命令行输入： hexo init blog初始化博客 hexo new 博客名新建文章 hexo g生成网页 $ cnpm install hexo-server --save搭建本地服务器,hexo s启动服务预览,打开浏览器输入地址：localhost:4000 安装Git部署插件npm install hexo-deployer-git --save,hexo d部署上传到GitHub的仓库里。 常用的Hexo 命令 npm install hexo -g #安装Hexo npm update hexo -g #升级 hexo init #初始化博客 hexo n “我的博客” == hexo new “我的博客” #新建文章 hexo g == hexo generate #生成 hexo s == hexo server #启动服务预览 hexo d == hexo deploy #部署 hexo server #Hexo会监视文件变动并自动更新，无须重启服务器 hexo server -s #静态模式 hexo s –debug #开启调试模式 hexo server -p 5000 #更改端口 hexo server -i 192.168.1.1 #自定义 IP hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令 配置Hexo安装主题推荐安装Next主题将主题文件hexo-theme-next下载到themes/next目录下，git clone https://github.com/iissnan/hexo-theme-next themes/next每个主文件下有两个配置文件 _config.yml，一个是站点根目录下即hexo本身的配置文件，一个是next主题配置文件 站点的配置文件_config.yml打开站点的_config.yml修改主题为next,设置基本站点信息,依次是网站标题、副标题、网站描述、作者、网站头像外部链接、网站语言、时区等 主题的_config.yml配置文件找到Scheme Settings 添加网易云音乐打开网页版的网易云音乐，选择喜欢的音乐，点击生成外链播放器,修改 blog\themes\next\layout\_macro的sidebar.swig文件，添加刚刚复制的外链代码 设置背景把你挑选的背景图片命名为：background.jpg，放在blog\themes\next\source\images里，在blog\themes\next\source\css\_custom文件的custom.styl首部添加： 1234body &#123; background:url(/images/background.jpg); background-attachment: fixed;&#125; background-attachment: fixed;是固定背景图片。这是设置一张静态图片作为背景，其实Next主题自带有动态的背景效果，修改主题配置文件中的canvas_nest: false为canvas_nest: true即可。 增加侧栏菜单条目默认的侧栏菜单条目有：首页、归档、标签、关于、搜索等。如果你想要增加其他的菜单条目，修改主题配置文件_config.yml里的Menu Settings中的menu和menu_icons两个地方,menu_icons对应菜单项的图标来自于Font Awesome 写博文 hexo new ‘postName’ 新建生成md文件在source/_posts路径下,完成格式 12345678---title: postName #文章页面上的显示名称，一般是中文date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改categories: 默认分类 #分类tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面---以下是正文 在正文合适的位置加上&lt;!--more--&gt;,主页设置文章显示长度 文本居中的引用 HTML方式：使用这种方式时，给 img 添加属性 class=”blockquote-center” 即可。 标签方式：使用 centerquote 或者 简写 cq。 此标签要求 NexT 的版本在 0.4.5 或以上。 若你正在使用的版本比较低，可以选择使用 HTML 方式。 123456789&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;&lt;!-- 其中 class="blockquote-center" 是必须的 --&gt;&lt;blockquote class="blockquote-center"&gt;blah blah blah&lt;/blockquote&gt;&lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;&#123;% centerquote %&#125;blah blah blah&#123;% endcenterquote %&#125;&lt;!-- 标签别名 --&gt;&#123;% cq %&#125; blah blah blah &#123;% endcq %&#125; 标签页和分类设置标签页设置 $ hexo new page &quot;tags&quot;确认站点配置文件里有tag_dir: tags,确认主题配置文件里有tags: /tags 编辑站点的source/tags/index.md，添加1234title: tagsdate: 2015-10-20 06:49:50type: &quot;tags&quot;comments: false 分类设置 $ hexo new page &quot; categories&quot;确认站点配置文件里有category_dir: categories,确认主题配置文件里有categories: /categories 编辑站点的source/categories/index.md，添加1234title: categoriesdate: 2015-10-20 06:49:50type: &quot;categories&quot;comments: false 鼠标点击爱心效果然后将里面的代码copy一下，新建love.js文件并且将代码复制进去，然后保存。将love.js文件放到路径/themes/next/source/js/src里面，然后打开\themes\next\layout_layout.swig文件,在末尾（在前面引用会出现找不到的bug）添加以下代码： 12&lt;!-- 页面点击小红心 --&gt;&lt;script type="text/javascript" src="/js/src/love.js"&gt;&lt;/script&gt; 1!function(e,t,a)&#123;function n()&#123;c(".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText="left:"+d[e].x+"px;top:"+d[e].y+"px;opacity:"+d[e].alpha+";transform:scale("+d[e].scale+","+d[e].scale+") rotate(45deg);background:"+d[e].color+";z-index:99999");requestAnimationFrame(r)&#125;function o()&#123;var t="function"==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement("div");a.className="heart",d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement("style");a.type="text/css";try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName("head")[0].appendChild(a)&#125;function s()&#123;return"rgb("+~~(255*Math.random())+","+~~(255*Math.random())+","+~~(255*Math.random())+")"&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document); 修改文章内链接样式修改文件 themes\next\source\css_common\components\post\post.styl ，在末尾添加如下css样式，love.js代码如下：123456789// 文章内链接文本样式.post-body a&#123; color: #0593d3; &amp;:hover &#123; color: #fc6423; &#125;&#125; 修改文章底部#号标签修改模板/themes/next/layout/_macro/post.swig，搜索 rel=”tag”&gt;#，将 # 换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 修改文章结束语在路径 \themes\next\layout_macro 中新建 passage-end-tag.swig 文件,并添加以下内容：123456789&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style="text-align:center;color: #ccc;font-size:14px;"&gt; -------------本文结束 &lt;i class="fa fa-child"&gt;&lt;/i&gt; 感谢您的阅读------------- &lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 接着打开\themes\next\layout_macro\post.swig文件，在post-body 之后， post-footer之前添加如下画红色部分代码（post-footer之前两个DIV）：如下大概在344行左右的位置： 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include 'passage-end-tag.swig' %&#125; &#123;% endif %&#125;&lt;/div&gt; 然后打开主题配置文件_config.yml,在末尾添加： 123# 文章末尾添加“本文结束”标记passage_end_tag: enabled: true 文章置顶12$ npm uninstall hexo-generator-index --save$ npm install hexo-generator-index-pin-top --save 在需置顶的文章Front-matter中添加 top:true 12345678---title: Hexo+github+coding搭建博客及备份date: 2017-3-10 22:06:20tags: [Hexo,hexo-theme-next,git,nodejs,coding,github,域名]categories: [博客]top: true keywords: [Hexo,hexo-theme-next,git,nodejs,coding,github,域名,hexo备份]--- 设置置顶标志 打开：/blog/themes/next/layout/_macro 目录下的post.swig文件，定位到&lt;div class=&quot;post-meta&quot;&gt;标签下，插入如下代码： 12345&#123;% if post.top %&#125; &lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt; &lt;font color=7D26CD&gt;置顶&lt;/font&gt; &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt; &#123;% endif %&#125; 隐藏底部强力驱动打开themes/next/layout/_partials/footer.swig,使用””隐藏之间的代码即可，或者直接删除。 修改网页底部的桃心还是打开themes/next/layout/_partials/footer.swig，找到：,然后还是在图标库中找到你自己喜欢的图标 第三方服务集成 评论系统 数据统计与分析 内容分析服务 搜索服务 其他服务 部署到github page 和coding page及备份部署到github page 在github上新建仓库username.github.io 翻到最后为了部署到github修改为： 1234deploy: type: gitrepo:git@github.com:username/username.github.io.gitbranch: master npm install hexo-deployer-git --save安装部署插件 执行hexo g -d生成静态网页部署至Github上。 访问地址：username.github.io 部署到coding page 若同时部署到coding,需新建coding项目最好取名同用户名,这样可直接访问username.coding.me，还要同git一样配置SSH，并打开coding page 服务，部署分支为master分支，修改站点的配置文件_config.yml为： 12345deploy: type: git repo: github: git@github.com:username/usernae.github.io.git,master coding: git@git.coding.net:username/username.git,master 并在本地source文件夹中添加一个文件12cd source/touch Staticfile #名字必须是Staticfile npm install hexo-deployer-git --save安装部署插件 执行hexo g -d生成静态网页部署至Github上。 访问地址：username.coding.me,加载页面会有coding欢迎页面 去除coding欢迎页面/广告 升级银牌会员，完善资料 修改themes/next/layout/_partialsfooter.swig:在&lt;div class=&quot;theme-info&quot;&gt;下新增&lt;span&gt;Hosted by &lt;a href=&quot;https://pages.coding.me&quot; style=&quot;font-weight: bold&quot;&gt;Coding Pages&lt;/a&gt;&lt;/span&gt; hexo g -d部署到coding,在pages 服务项勾选 已放置 Hosted by Coding Pages，审核通过就可以了。 将hexo源文件备份到github 在源文件夹下 鼠标右键 打开git bash, git clone git@github.com:username/username.github.io.git,克隆下来的文件只保存.git文件夹，.git在源文件夹下。 对于换电脑从github仓库clone下来的或从旧电脑拷贝的博客源文件需将themes/next/和source/_posts/(我用的是NexT主题)中的.git/删除，否则无法将主题文件夹和资源文件夹push； github两个分支：master和hexo分别保存静态网页和源文件。新建hexo分支并切换分支git checkout -b hexo 执行git add .、git commit -m &quot;&quot;、-git push origin hexo来提交hexo网站源文件(_config.yml，themes/，source/，scaffolds/，package.json，.gitignore)； 将hexo源文件备份到coding 同github,git@e.coding.net:user/user.git git checkout -b hexo git add . git commit -m &quot;&quot; git push origin hexo 购买域名及绑定域名 阿里云购买域名，若在DNSpod解析，需修改DNS服务器 DNSpod解析，具体搜索教程 相关链接：git下载及教程Node.jsiconsNexT使用中文Next下载Next主题个性化配置GitHub+Hexo 搭建个人网站详细教程hexo部署github和coding及绑定域名Hexo博客提交百度和Google收录]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>Hexo</tag>
        <tag>hexo-theme-next</tag>
        <tag>nodejs</tag>
        <tag>coding</tag>
        <tag>github</tag>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux操作系统学习]]></title>
    <url>%2F2017%2F03%2F10%2Flinux%2F</url>
    <content type="text"><![CDATA[linux基本命令 ls:列出当前文件所有文件夹 uname：显示当前系统基本信息，底层内核信息，不带参数 uname -r :内核版本号 uname -a : 所有信息 同 uname –all ctrl+c:终止当前命令 firefox :打开火狐 任何命令+ &amp; ：放在后台运行，不会干扰当前命令行 如 firefox &amp; tab： 自动补全命令名 输入的字母有其他相似命令，按两下tab显示全部命令 自动补全文件名 无法补全参数 clear 清除当前屏幕 jobs:管理后台作业 sleep 5000:停5000s 回车卡5000s ctrl+z：暂停某个程序 bg 继续开始暂停的后台 bg 2 :序号为jobs显示出的序号 fg 放回前台 BASH会保存输入命令的记录：通过上下键或者history命令查看历史记录 !!:重复前一个命令 同方向键↑ !字符：重复前一个以字符开头的命令 !num：按照历史记录的序号执行命令 !?abc：重复之前包含abc的命令 -n：重复n个命令之前的那个命令 ctrl+r : 在历史记录中搜索命令 重新调用前一个命令中的参数esc. （按esc之后按.） 命令行通配符 * 匹配零个或多个 ？ 匹配任意一个字符 [0-9] 匹配一个数字范围 [abc] 匹配列表里任何字符 [^abc] 匹配列表以外字符 切换用户 su - 切换到root用户并使用一个新的运行环境；不加-即su不启用新环境；-后面加用户名切换到指定用户名如 su - yx sudo使用管理员用户身份运行命令 id 显示当前用户信息 passwd 修改当前用户密码 linux文件系统结构 linux文件系统为一个倒转的单根树状结构 文件系统的根为”/“ 文件系统严格区分大小写 路径使用“/”分割，windows使用”\” 每个shell或系统进程都有一个当前工作目录 使用pwd命令可以显示当前的工作目录 文件名称 文件名次大小写敏感 名称最多可以使用255个字符 除了正斜线外，都是有效字符 通过touch字符可以创建一个空白文件或者更新已有文件的时间 以”.”开头的文件为隐藏文件 ls列出目录内容 ls -a：显示所有文件（包括隐藏文件–绝大多数为配置文件） ls -l:显示详细信息 ls -R:递归显示子目录结构 ls -ld:显示目录和链接信息 file查看文件的类型绝对路径与相对路径 绝对路径：以“/”开头，递归每级目录直到目标的路径，不受当前所在工作目录限制。 相对路径：以当前目录为起点，到达目标的路径，受当前所在目录限制。 cd：切换目录 上一级目录：.. 当前目录：. 家目录：~ 上一个工作目录：- linux文件操作 使用cp命令复制文件或目录：cp 源文件 目标文件 如cp linuxcast linuxcast2 复制文件到文件夹中：cp 源文件 目标文件夹/ 如 cp linuxcast linuxcast.net/ 复制文件夹：cp -r 源文件夹 目标文件夹 ；加-v显示详细内容(-r -v同-rv)如 cp -rv linuxcast.net linuxcast.net2 mv移动或者重命名文件 删除文件rm -i ：交互式 （提示） -r ：递归的删除文件夹里的所有内容 -f：强制删除，没有警告 创建目录 mkdir 删除目录 rmdir :不能删除非空目录 linux 系统目录 bin 常用的可执行二进制文件 boot 引导目录 linux内核存在这 dev 计算机上所有的硬件设备 ect 几乎所有的配置文件 home 家目录 lib 相关的库文件 media 挂载用的 mnt 正常的挂载目录，所有系统肯定有 opt 大型软件 proc 只存在在内存中，虚拟文件夹，显示系统实时的信息 sbin 可执行的二进制文件，命令只有超级用户root可以使用 sys 系统底层信息 tmp 临时目录，会自动删除 usr 保存应用软件 var 保存经常变化的信息–log日志信息 常用命令 date 格式化显示系统时间：date +%Y-%m-%d或者date +%Y:%m:%d(连接符可自定义) 修改时间 date -s “20:20:20” 需要切换到超级用户 hwclock（clock）显示硬件时钟时间 cal查看日历 uptime查看系统运行时间 echo显示输入的内容 cat显示文件内容 head 显示文件的头几行，ore为10行 -n 指定显示的行数 more用于翻页显示文件内容（只能向下翻页） less用于翻页显示文件内容（带上下翻页） tail显示文件的末尾几行（默认10行） -n 指定显示的行数 -f 追踪显示文件更新（一般用于查看日志，命令不会推出，而是持续显示新加入的内容） lspci查看pci设备 -v查看详细信息 lsusb 查看usb设备 -v查看详细信息 lsmod查看加载的模块（驱动） shutdown 关闭、重启计算机 -h 关闭计算机 -r 重新启动如：立即关机：shutdown -h now10分钟后关机：shutdown -h +1023:30分关机：shutdown -h 23:30立即重启：shutdown -r now poweroff 立即关闭计算机 reboot立即重启计算机 zip用以压缩文件 zip xx.zip myfile unzip用以解压zip文件 :unzip xx.zip gzip用以压缩文件 tar用以归档文件 tar -cvf XX.tar 文件夹 如：tar -cvf ectbackup.tar /etc tar -xvf linuxcast.tar tar -cvzf backup.tar.gz /etc -z 参数就爱那个归档后的归档文件进行gzip压缩 du -sh 可查看文件大小 locate用以快速查找文件爱你、文件夹 locate keyword 此命令需要预先建立数据库，数据库默认每天更新一次，可用updatedb命令手工建立、更新数据库（好处查找速度快，缺点刚新建的文件数据库未更新将查询不到） find用以高级查找文件、文件夹:find 查找位置 查找参数如： find . -name *linuxcast* find / -name *.conf find / -perm 777 (查找所有权限为777) find / -type d (返回根目录中所有的目录 -l 链接 即快捷方式) find . -name “a*” -exec ls -l {} \; 查找条件：-name -perm -user -group -ctime -type -size vim文本编辑器vim是一个命令行界面下的文本编辑工具，通过vim + 目标文件路径打开。 vim模式: 命令模式（常规模式） 在vim启动后，默认进入命令模式，任何模式都可以通过esc回到命令模式。命令模式下可以通过键入不同的命令完成选择、复制、粘贴、撤销等操作。 插入模式 在命令模式下按i键即可进入插入模式，可以输入编辑文本内容。使用esc返回命令模式 ex模式 在命令模式中按：键可以进入ex模式。光标会移动到地步。在这里可以保存修改或退出vim 命令模式快捷键 i 在光标前插入文本 o 在当前行的下面插入新行 dd 删除整行 yy 将当前行的内容放入缓冲区（复制当前行） n+yy 将n行的内容放入缓冲行（复制n行） p 将缓冲区中的本文放入光标后（粘贴） u 撤销上一个操作 r 替换当前字符 / 查找关键字 EX模式快捷键 :w 保存当前修改 :q 退出 :q! 强制退出，不保存修改 :x 保存并退出，相当于:xq :set number 显示行号 :! 系统命令 执行一个系统命令并显示结果 :sh 切换到命令行，使用ctrl+d切换回vim ：noh/:set nohls 取消查找高亮显示 磁盘、分区、MBR和GPTIDE 设备的名称为hd[a-z],SATA、SCSI、SAS、USB等设备名称为sd[a-z] 不同分区用设备名称+分区号 如sda1、sda2 主流的分区机制为MBR和GPT MBR是传统的分区机制，应用于绝大多数使用BIOS的PC设置 MBR支持32bit和64bit系统 MBR支持分区数量有限 MBR只支持不超过2T的硬盘。超过2T的硬盘只能使用2T空间 MBR占有512字节，前446引导代码，64字节分区表，2个字节启动标识55 aa MBR分区： 主分区：只能创建4个主分区 扩展分区：一个扩展分区会占用一个主分区位置 逻辑分区：最多支持63个IDE分区和15个SCSI分区 GPT（guid partition table）：较新的分区机制 支持超过2T的磁盘 向后兼容MBR 必须在支持UEFI硬件上才能使用 必须使用64bit系统 mac、linux系统都能支持GPT分区格式 win7 64bit、winserver2008 64bit支持GPT FDISK分区工具：一个基于MBR的分区工具，如果使用GPT，无法使用fdisk进行分区 只有具有超级用户权限才能运行 使用fdisk -l可以列出所有安装的磁盘及其分区信息 使用fdisk /dev/sda 可以对目标磁盘进行分区操作 分区之后需要使用partprobe命令让内核更新分区信息，否则需要重启才能识别新的分区 /proc/partitions文件也可用来查看分区信息 文件系统操作系统通过文件系统管理文件及数据，磁盘或分区需要创建文件系统之后才能够为操作系统能够使用，创建文件系统的过程又成为格式化。 没有文件系统的设备又称之为裸raw设备 常见的文件系统有fat32 、NTFS、ext2、ext3、ext4、xfs、HFS等 文件系统之间的区别：日志、支持的分区大小、支持的单个文件大小、性能等 windows下的主流文件系统是NTFS linux下的主流文件系统是ext3、ext4 创建文件系统：mke2fs mke2fs -t ext4 /dev/sdb1 -b blocksize 指定文件系统块大小 -c 建立文件系统时检查坏损块 -L label 指定卷标 -j 建立文件系统日志 mkfs也可创建文件系统，较简单，参数比较少，不能精细化的控制 dumpe2fs 查看文件系统信息 带日志的文件系统 ext3、ext4拥有较强的稳定性，在出错时可以进行恢复。 文件系统将准备执行的事务的具体内容写入日志 文件系统进行操作 操作成功后，将事务的具体内容从日志中删除 好处：当事务执行时出现意外，可以通过查询日志进行恢复操作。 e2label 用来为文件系统添加标签 e2label /dev/sda2 显示sda2的系统标签 e2label /dev/sda2 LINUXCAST 将sda2的系统标签设置为LINUXCAST，标签建议用大写 fsck用来检查并修复损坏的文件系统 使用-y参数不提示而直接进行修复 默认fsck会自动判断文件系统类型，如果文件系统损坏较严重，用-t参数指定文件系统类型 对于识别为文件的损坏数据（文件系统无记录），fsck会将该文件放入lost+found目录 系统驱动时会对磁盘进行fsck操作 挂载、使用文件系统磁盘或分区创建文件系统后，需要挂载到一个目录才能够使用。 windows或mac会自动挂载，windows称之为c盘、d盘，linux需要手工进行挂载操作或配置系统进行自动挂载 /mnt 通过mount命令将格式化好的磁盘或分区挂载到一个目录上：mount /dev/sdb1(要挂载的分区) 、/mnt(挂载点) 不带参数的mount命令会显示所有已挂载的文件系统 -t 指定文件系统的类型 -o 指定挂载选项 ro,rw 以只读或读写形式挂载，默认是rw 如 mount -o remount,ro /dev/sdb1 /mnt/ sync 代表不使用缓冲，而是对所有操作直接写入磁盘 async 代表使用缓冲，默认是async noatime 代表每次访问文件时不更新文件的访问时间 atime 代表每次访问文件时更新文件的访问时间 remount 重新挂载文件系统 umount命令用来卸载已挂载的文件系统，相当于windows的弹出 umount 文件系统/挂载点 umount /dev/sdb1== umount /mnt 如果出现device is busy 报错，表示该文件系统正在被使用，无法卸载。 使用fuser -m /mnt查看使用文件系统的进程 使用lsof /mnt查看正在被使用的文件 配置文件 /etc/fstab 用来定义需要自动挂载的文件系统12345需要挂载的设备 挂载点 文件系统 挂载选项 dump、fsck相关选项/dev/sdb1 /mnt ext4 defaults 0 0LABEL=LINUXCAST /mnt ext4 defaults 0 0 要挂载的设备也可以label进行识别，使用LABEL=LINUXCAST取代/dev/sdb1 mount -a 命令会挂载所有fstab中定义的自动挂载项 -h/–help 参数获取好似用方法、参数信息 man命令帮助命令：如man ls man -k 关键字 ：查询包含该关键字的文档 info命令更详细。info 和man都可以用/+关键字进行搜索 用户 用户id为32位， 用户分为三种： root用户：id为0的用户为root用户 系统用户：1-499 没有shell 普通用户：500以上 系统中的文件都有一个所属用户及所属组 使用id命令可以显示当前用户的信息 使用passwd命令可以修改当前用户密码 相关文件 /etc/passwd 保存用户信息 /etc/shadow 保存用户密码（加密的） /etc/group 保存组信息 查看登录的用户 whoami：显示当前用户 who：显示有哪些用户已经登录系统 w：显示哪些用户已经登录并在干什么 创建一个用户： useradd 在 /etc/passwd中添加用户信息 使用passwd创建密码，则将密码保存在/etc/shadow中 为用户建立一个新的家目录/home/新用户 在/etc/skel/中的文件复制到用户的家目录中 建立一个于用户用户名相同的组，新建用户默认属于这个同名组 -d 家目录 -s 登录shell -u userid -g 主族 -G 附属组（最多31个，用“,”隔开） usermod 修改用户信息 -l 新用户名 -u 新userid -d 用户家目录位置 -g用户所属主组 -G 用户所属附属组 -L锁定用户使其不能登录 -U 解除锁定 userdel 用以删除指定用户 （保留用户的家目录） userdel -r 同时删除用户的家目录 创建组 groupadd 创建组groupmod -n 修改组名groupmod -g 修改组idgroupdel 删除组 对于目录来说必须有x执行权限，否则无法查看内容 Linux基于UGO模型进行控制： U代表user，G代表Group，O代表Other 每个文件的权限基于UGO进行设置 权限三个一组（rwx），对应UGO分别设置 每一个文件拥有一个所属用户和所属组，对应UG，不属于该文件所属用户或所属组的使用O权限 使用ls -l查看当前目录下文件的详细信息，分别对应：UGO、 链接数量、 U：所属用户 、G：所属组 、大小 、时间 、文件名。 drwxr-xr–:d表示文件类型 rwx:U权限 r-x:G权限 r–:O权限 chown用以改变文件的所属用户 -R 参数递归的修改目录下的所有文件的所属用户 chgrp用以改变文件的所属组 -R 参数递归的修改目录下的所有文件的所属组 修改权限：chmod 模式 文件 u、g、o分别代表用户、组和其他 a可以代指ugo +、—代表加入或删除对应权限 r\w\x代表三种权限 示例： chmod u+rw linuxcast.net chmod g-x linuxcast.net chmod go+r linuxcast.net chmod a-x linuxcast.net chmod支持以数字方式修改权限 r=4(2^2) w=2(2^1) x=1(2^0) rw=4+2=6 rwx=4+2+1=7 r-x=4+1=5 chmod 660 linuxcast.net == rw-rw—- chmod 775 linuxcast.net ==rwxrwxr-x 每一个终端都拥有一个umask属性，来确认新建文件、文件夹的默认权限 umask使用数字权限方式表示 目录的默认权限：777-umask 文件的默认权限：666-umask 一般普通用户默认umask是002，root用户默认umask是022 对于普通用户：新建文件的权限：666-002=664 新建目录的权限是777-002=775 设置特殊权限 设置suid chmod u+s linuxcast.net 设置sgid chmod g+s linuxcast.net 设置sticky chmod o+t linuxcast.net 数字方式表示： suid =4 sgid =2 sticky=1 chmod 4755 linuxcast.net 设置了suid ip编址是一个双层编址方案，一个ip地址标识一个主机（或一个网卡接口）最为广泛的是ipv4 编址，逐渐向ipv6编址切换ipv4地址为32位长，ipv6地址为128位长一个ipv4地址分为两个不分：网络部分和主机部分网络部分用来表示所属区域、主机部分用来标识该区域中的哪个主机 域名分为三个部分 ：www.linuxcate.net 主机名 域名 类型 域名与ip地址通过DNS转换 要配置一个局域网通信的计算机 ip地址 子网掩码 要配置一个跨网段通信的计算机 ip地址 子网掩码 网关 要配置一个可上网的计算机 ip地址 子网掩码 网关 DNS 以太网连接 以太网接口被命名为：eth0、eth1等，0、1代表网卡编号 通过lspci命令可以查看网卡硬件信息，如果是usb网卡，可以使用lsusb来查看 ifconfig来查看接口信息 ifconfig -a 查看所有接口 ifconfig eth0 查看指定接口 ifup eth0 启用eth0接口 ifdown eth0 禁用接口 setup 命令配置网络信息 网卡配置文件 /etc/sysconfig/network-script/ifcfg-eth0 DNS配置文件 /etc/resolv.conf 主机名配置文件 /etc/sysconfig/network 静态主机名配置文件 /etc/hosts 网络测试命令 测试网络连通性 ping 192.168.1.1 ping www.linuxcast.net 测试DNS解析 host www.linuxcast.net dig www.linuxcast.net 显示路由表：ip route 追踪到达目标地址的网络路径 traceroute www.linuxcast.net 使用mtr进行网络质量测试 mtr www.linuxcast.net 实时修改主机名：hostname（重启后恢复） 永久性修改主机名：/etc/sysconfig/network 中 hostname 管道和重定向命令行shell的数据流： 名称 说明 编号 默认 STDIN 标准输入 0 键盘 STDOUT 标准输出 1 终端 STDERR 标准错误 2 终端 命令通过STDIN接收参数或数据，通过STDOUT输出结果或通过STDERR输出错误 分类 关键字 定义 例子 重定向 &gt; 将STDOUT重定向到文件（覆盖） echo”linuxcast” &gt; outfile 重定向 &gt;&gt; 将STDOUT重定向到文件（追加） echo”linuxcast” &gt;&gt; outfile 重定向 2&gt; 将STDERR重定向到文件（覆盖） ls -ls 2&gt; outfile 重定向 2&gt;&amp;1 将STDERR 与STDOUT结合 重定向 &lt; 重定向标准输入 grep linuxcast &lt; /etc/passwd 管道 &#124; 将一个名的STDOUT作为另一个命令的STDIN find / -user linuxcast 2&gt; /dev/null &#124; grep Video 管道通常用来组合不同的命令。 重定向通常用来保存某命令的输出信息或错误信息，可以用来记录执行结果或保存错误信息到一个指定的文件 基于关键字搜索 grep -i 在搜索的时候忽略大小写 -n 显示所在行数 -v 输出不带关键字的行 -Ax 在输出的时候包含结果所在行之后的指定行数 -Bx 在输出的时候包含结果所在行之前的指定行数 基于列处理文本cut -d 指定分割字符 （默认为TAB） -f 指定输出的列号 -c 基于字符进行切割 grep linuxcat /etc/passwd | cut -d: -f3 wc用以统计文本信息 -l 只统计行数 -w 只统计单词 -c 只统计字节数 -m 只统计字符数 sort用以对文本内容进行排序（默认正序） -r 进行倒序排序 -n 基于数字进行排序 -f 忽略大小 -u 删除重复行 -t c 使用c作为分隔符分割为列进行排序 -k x 当进行基于指定字符分割为列的排序时，指定基于那个列排序 uniq用以删除重复的相邻行 diff用来比较两个文件的区别：diff linuxcast linuxcast-new -i 忽略大小写 -b 忽略空格数量的改变 -u 统一显示比较信息（一般用以生成patch文件） aspell用以显示检查文本拼写 tr用以处理文本内容 删除关键字：tr -d ‘TMD’ &lt; linuxcast 转换大小写： tr ‘a-z’ ‘A-Z’ &lt; linuxcast sed用以搜索并替换文本sed ‘s/linux/unix/g’ linuxcast :在linuxcast中查找linux全部g替换成unixsed ‘1,50s/linux/unix/g’ linuxcast :1-50行sed -e ‘s/linux/unix/g’ -e ‘s/nash/nash_su/g’ linuxcast :查找多个内容sed -f sededit linuxcast ：把命令存到sededit中，调用sededit BIOS找到可启动设备后执行其引导代码，引导代码为MBR的前446字节。跳转到grub（/boot）是linux使用的主流引导程序 Linux系统启动： BIOS –&gt; MBR: Boot Code –&gt; 执行引导程序 - GRUB –&gt; 加载内核 –&gt; 执行init –&gt; runlevel dmesg查看本次内核启动的数据信息 /var/log/ init是linux系统中运行的第一个进程 调用/etc/rc.d/rc.sysinit负责对系统进行初始化，挂载文件系统，并且根据运行级别启动相应服务 linux运行级别：/etc/inittab配置默认的运行级别 0关机 1单用户模式 2不带网络的多用户模式 3多用户模式 4未使用-5 XII图形化模式-6 重新启动 单用户修改root密码 开机引导时为内核传递参数‘1’或者“single”系统进入单用户单用户模式下不启动任何服务单用户模式直接以root用户登录，并且不需要密码可以使用passwd修改root密码 源代码一般会被打包成 tar.gz的归档压缩文件，需要编译成为二进制形式才能运行使用 安装软件：rpm -i software.rpm，-v显示详细信息-h显示进度条 卸载软件：rpm -e software 升级形式安装：rpm -U software-new 列出所有安装的rpm软件：rpm -qa 查询目标文件属于哪个rpm包：rpm -qf filename 查询指定已安装rpm软件的信息：rpm -qi packagename 查询指定已安装rpm软件包含的文件：rpm -ql packagename 查询rpm文件的信息：rpm -qip software.rpm 查询rpm文件包含的文件：rpm -qlp software.rpm 导入密钥：rpm –import RPM-GPG-KEY-CentOS-6 验证rpm文件：rpm -K software.rpm 验证已安装的软件：rpm -V software yum使用仓库保存管理rpm软件，保存在/etc/yum.repos.d/目录下，格式如下： 12345[LinuxCast]name=This is linuxcast rpm soft repobaseurl=http://www.linuxcast.nt/yum/centos/6/i386/rpms/enabled=1gpgcheck=1 仓库可以使用file、http、ftp、nfs方式 yum配置文件必须.repo结尾 一个配置文件内可以保存多个仓库的配置信息 /etc/yum.repos.d/目录下可以存在多个配置文件 yum install software-name 安装指定软件 yum remove software-name 卸载指定软件 yum update software-name 更新软件 yum search keyword 搜索 yum list (all |installed |recent|updates)列出全部、安装的、最近的、软件更新 yum info packagename 相当于 rpm -qi 显示指定软件的信息 yum whatprovides filename 查询哪个rpm软件包含目标文件 创建yum仓库 将所有rpm文件拷贝到一个文件夹中 ：cp -rv /光盘/Packages/* /linuxcast-yum 通过rpm命令手工安装createrepo软件：rpm -ivh createrepo 运行命令createrepo -v /yum仓库 进行索引，索引后创建repodata目录 如果有分组信息，则在运行命令的时候使用-g参数指定分组文件createrepo -g /tmp/*compsxml /rpm-directoryCentOS/RHEL的分组信息保存在光盘repodata/目录下，文件名以comps.xml结尾的xml文件-创建好后设置配置文件：/etc/yum.repos.d/ —&gt;vim linuxcast.repo 12345[linuxcast]name=linuxcast.net Yum repo #描述baseurl= file:///linuxcast-yum/ #file://yum仓库绝对路径enabled=1gpgcheck=0 创建好之后本机可以通过file方式直接使用，如果需要作为对外的YUM仓库服务器，可以通过HTTP,FTP或NFS协议共享出去 yum clearn all 每次运行清除缓存信息]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
